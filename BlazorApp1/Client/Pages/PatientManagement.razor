@page "/patient-management"
@using Core.Models
@using Services

<div class="container my-5">
    <div class="card shadow-sm border-0 rounded-4 bg-white">
        <div class="card-body p-5" style="background-color: #f9fafb;">
            <h3 class="text-center text-primary mb-4">🩺 <span class="fw-bold">Patient Management</span></h3>

            <div class="d-flex justify-content-center mb-4">
                <button class="btn btn-success btn-lg rounded-pill px-5" @onclick="NavigateToCreate">
                    <i class="fas fa-user-plus me-2"></i> Add New Patient
                </button>
            </div>

            <EditForm Model="searchModel" OnValidSubmit="SearchPatients">
                <div class="input-group mb-4 rounded-pill shadow-sm">
                    <span class="input-group-text bg-white border-0">
                        <i class="fas fa-search text-muted"></i>
                    </span>
                    <InputText @bind-Value="searchModel.FullName" class="form-control border-0 rounded-end-pill" placeholder="Search by Name" />
                    <button class="btn btn-info rounded-pill px-4" type="submit">Search</button>
                </div>
            </EditForm>

            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead style="background-color: #007bff; color: white;">
                        <tr>
                            <th>MRN</th>
                            <th>Full Name</th>
                            <th>Mother Name</th>
                            <th>Transfer From</th>
                            <th>Birth Date</th>
                            <th class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (patients.Any())
                        {
                            @foreach (var patient in patients)
                            {
                                <tr>
                                    <td>@patient.MRN</td>
                                    <td>@patient.FullName</td>
                                    <td>@patient.MotherName</td>
                                    <td>@patient.TransferFrom</td>
                                    <td>@patient.BirthDate.ToShortDateString()</td>
                                    <td class="text-center">
                                        <button class="btn btn-outline-warning btn-sm me-2 rounded-pill px-3" @onclick="() => NavigateToUpdate(patient.Id)">
                                            <i class="fas fa-edit me-1"></i> Update
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm rounded-pill px-3" @onclick="() => DeletePatient(patient.Id)">
                                            <i class="fas fa-trash-alt me-1"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center text-muted py-4">No patients found. Try searching with a different name.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Patient> patients = new();
    private Patient searchModel = new();

    [Inject]
    private PatientService PatientService { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        patients = (await PatientService.GetPatientsAsync()).ToList();
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/create-patient");
    }

    private void NavigateToUpdate(int id)
    {
        NavigationManager.NavigateTo($"/update-patient/{id}");
    }

    private async Task DeletePatient(int id)
    {
        await PatientService.DeletePatientAsync(id);
        patients = (await PatientService.GetPatientsAsync()).ToList();
    }

    private async Task SearchPatients()
    {
        patients = (await PatientService.SearchPatientsAsync(searchModel.FullName)).ToList();
    }
}
